<?php

namespace App\Controller;

use App\Entity\Person;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use JMS\Serializer\SerializerBuilder;
use Nelmio\ApiDocBundle\Annotation\Model;
use Swagger\Annotations as SWG;


class PersonController extends AbstractController {
    /**
     * @Route("/", name="person_index", methods={"GET"})
     * @SWG\Response(
     *     response=200,
     *     description="Returns the person index page",
     * )
     */
    public function index(Request $request) {
        $form = $this->createFormBuilder()
            ->add('File',FileType::class,array('attr'=> array('class'=>'form-control')))
            ->add('Save',SubmitType::class,array(
                'label'=> 'Process',
                'attr'=> array('class'=>'btn btn-primary mt-3')
            ))->getForm();

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){            
            $person = $form->getData();
            $xmlData = $this->readXML($person["File"]);
            $this->processXML($xmlData);
        }

        return $this->render('people/index.html.twig',array(
            'form' => $form->createView()
        ));
    }

    private function readXML($file){
        $extention = $file->guessExtension();

        if(!$extention){
            $extention = "xml";
        }

        $fileName = $this->generateUniqueFileName().'.'.$extention;

        // moves the file to the directory where brochures are stored
        $file->move(
            $this->getParameter('xml_directory'),
            $fileName
        );

        $xmlString = file_get_contents($this->getParameter('xml_directory').'/'.$fileName);
        
        return simplexml_load_string($xmlString);
    }

    private function processXML($obj){
        foreach($obj->person as $person){
            $this->savePerson($person->personname, ( array ) $person->phones->phone);            
        }
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return "person".md5(uniqid());
    }

    private function savePerson($personname, $phones){

        $entityManager = $this->getDoctrine()->getManager();
        $person = new Person();

        $person->setPersonname($personname);
        $person->setPhones($phones);

        $entityManager->persist($person);
        $entityManager->flush();

        return new Response("OK");
    }

    /**
     * List the rewards of the specified user.
     *
     * This call takes into account all confirmed awards, but not pending or refused awards.
     *
     * @Route("/person", name="person_show", methods={"GET"})
     * @SWG\Response(
     *     response=200,
     *     description="Returns all person objects",
     *     @SWG\Schema(
     *         type="array",
     *         @SWG\Items(ref=@Model(type=Person::class))
     *     )
     * )
     */
    public function getAllPeople(){
        $person = $this->getDoctrine()->getRepository(Person::class)->findAll();
        //serialize data and return it
        $serializer = SerializerBuilder::create()->build();
        $data = $serializer->serialize($person, 'json');
        // var_dump($serializer);
        return new Response($data,Response::HTTP_OK,array('content-type' => 'application/json'));
    }

     /**
     * @Route("/person/{id}", name="person_show", methods={"GET"})
       * @SWG\Response(
     *     response=200,
     *     description="Returns one person object",
     *     @SWG\Schema(
     *         type="object",
     *         @SWG\Items(ref=@Model(type=Person::class))
     *     )
     * )
     * @SWG\Parameter(
     *     name="id",
     *     in="query",
     *     type="number",
     *     description="The field used as primary key"
     * )
     */
    public function getPerson($id){
        $person = $this->getDoctrine()->getRepository(Person::class)->find($id);
        //serialize data and return it
        $serializer = SerializerBuilder::create()->build();
        $data = $serializer->serialize($person, 'json');
        return new Response($data,Response::HTTP_OK,array('content-type' => 'application/json'));
    }
}