<?php

namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Config\Definition\Exception\Exception;
use JMS\Serializer\SerializerBuilder;
use App\Entity\Shiporder;
use App\Entity\Person;
use App\Model\Ship;
use App\Model\Item;
use Nelmio\ApiDocBundle\Annotation\Model;
use Swagger\Annotations as SWG;



class ShiporderController extends AbstractController
{
    /**
     * @Route("/ship", name="shiporder", methods={"GET"})
     * @SWG\Response(
     *     response=200,
     *     description="Returns the shiporder index page",
     * )
     */
    public function index(Request $request)
    {
        $form = $this->createFormBuilder()
            ->add('File',FileType::class,array('attr'=> array('class'=>'form-control')))
            ->add('Save',SubmitType::class,array(
                'label'=> 'Process',
                'attr'=> array('class'=>'btn btn-primary mt-3')
            ))->getForm();

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){            
            $person = $form->getData();
            $xmlData = $this->readXML($person["File"]);
            $this->processXML($xmlData);
        }

        return $this->render('shiporder/index.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    private function readXML($file){
        $extention = $file->guessExtension();

        if(!$extention){
            $extention = "xml";
        }

        $fileName = $this->generateUniqueFileName().'.'.$extention;

        // moves the file to the directory where brochures are stored
        $file->move(
            $this->getParameter('xml_directory'),
            $fileName
        );

        $xmlString = file_get_contents($this->getParameter('xml_directory').'/'.$fileName);
        
        return simplexml_load_string($xmlString);
    }

    private function processXML($obj){
        foreach($obj->shiporder as $shiporder){
            $shiporderEntity = new Shiporder();
            
            $person = $this->getDoctrine()->getRepository(Person::class)->find($shiporder->orderperson);

            if(!$person){
                throw new Exception("Could not location Person with id ".$shiporder->orderperson);
            }
            
            $shiporderEntity->setPerson($person);
            
            $shipTo = new Ship();
            $shipTo->setName((string) $shiporder->shipto->name);
            $shipTo->setAddress((string)$shiporder->shipto->address);
            $shipTo->setCity((string)$shiporder->shipto->city);
            $shipTo->setCountry((string)$shiporder->shipto->country);

            $shiporderEntity->setShipto($shipTo);

            $items = $this->processShipItems($shiporder->items);
            $shiporderEntity->setItems($items);

            $this->saveShiporder($shiporderEntity);

        }
    }

    private function processShipItems($itemsArr){
        $arr = array();
        foreach($itemsArr as $item){
            $itemObj = new Item();
            $itemObj->setTitle((string) (object) $item->item->title);
            $itemObj->setNote((string) (object) $item->item->note);
            $itemObj->setQuantity((string) (object) $item->item->quantity);
            $itemObj->setPrice((string) (object) $item->item->price);
            array_push($arr, $itemObj);
        }
        return $arr;
    }

    private function saveShiporder($shiporder){

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($shiporder);
        $entityManager->flush();

        return new Response("OK");
    }



    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return "shiporder".md5(uniqid());
    }


     /**
     * @Route("/shiporder", name="all_shiporder_show",methods={"GET"})
     * @SWG\Response(
     *     response=200,
     *     description="Returns all shiporder objects",
     *      @SWG\Schema(
     *         type="array",
     *         @SWG\Items(ref=@Model(type=Shiporder::class))
     *     )
     * )
     */    
    public function getAllShiporder(){
        $shiporder = $this->getDoctrine()->getRepository(Shiporder::class)->findAll();
        //serialize data and return it
        $serializer = SerializerBuilder::create()->build();
        $data = $serializer->serialize($shiporder, 'json');
        // var_dump($serializer);
        return new Response($data,Response::HTTP_OK,array('content-type' => 'application/json'));
    }

     /**
     * @Route("/shiporder/{id}", name="shiporder_show",methods={"GET"})
     * @SWG\Response(
     *     response=200,
     *     description="Returns one shiporder objects",
     *      @SWG\Schema(
     *         type="array",
     *         @SWG\Items(ref=@Model(type=Shiporder::class))
     *     )
     * )
     * @SWG\Parameter(
     *     name="id",
     *     in="query",
     *     type="number",
     *     description="The field used as primary key"
     * )
     */
    public function getShiporder($id){
        $shiporder = $this->getDoctrine()->getRepository(Shiporder::class)->find($id);
        //serialize data and return it
        $serializer = SerializerBuilder::create()->build();
        $data = $serializer->serialize($shiporder, 'json');
        return new Response($data,Response::HTTP_OK,array('content-type' => 'application/json'));
    }
}
